import { useEffect, useMemo, useRef, useState } from "react";

import {
	createFileRoute,
	useNavigate,
	useSearch,
} from "@tanstack/react-router";

import { LoginForm } from "@/components/login/LoginForm";
import { MicrosoftLoginButton } from "@/components/login/MicrosoftLoginButton";
import { useAuth } from "@/lib/auth";

const REDIRECT_MESSAGES = [
	{
		title: "–õ–∏—à–µ –æ–±—Ä–∞–Ω—ñ —Å—Ç—É–¥–µ–Ω—Ç–∏ –ù–∞–£–ö–ú–ê –º–æ–∂—É—Ç—å –ø—Ä–æ–π—Ç–∏ –¥–∞–ª—ñ üè∞",
		description: "–ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è, –≥–µ—Ä–æ–π —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–∏—Ö –±–∞—Ç–∞–ª—ñ–π!",
	},
	{
		title: '–í—Ç–æ–º–∏–≤—Å—è —Å–ª—É—Ö–∞—Ç–∏, —â–æ "—Ü–µ–π –∫—É—Ä—Å —Ç–æ–ø"?',
		description: "–ó–∞–π–¥–∏, –ø—Ä–æ—á–∏—Ç–∞–π –≤—ñ–¥–≥—É–∫–∏ ‚Äî —ñ –≤–∏—Ä—ñ—à–∏ —Å–∞–º.",
	},
	{
		title: "–¢–∞—î–º–Ω–∏–π –∫–ª—É–± –º–æ–≥–∏–ª—è–Ω—Å—å–∫–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ üéØ",
		description: "–£–≤—ñ–π–¥–∏, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —è–∫—ñ –∫—É—Ä—Å–∏ —Å–ø—Ä–∞–≤–¥—ñ –≤–∞—Ä—Ç—ñ —Ç–≤–æ—î—ó —É–≤–∞–≥–∏!",
	},
	{
		title: "–ù–∞–π–∫—Ä–∞—â—ñ –ø—Ä–æ—Ñ–µ—Å–æ—Ä–∏ vs –Ω–∞–π—Ü—ñ–∫–∞–≤—ñ—à—ñ –∫—É—Ä—Å–∏ ‚öîÔ∏è",
		description: "–ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —ñ –ø–æ–±–∞—á—å —Ä–µ–π—Ç–∏–Ω–≥ –±–æ—Å—ñ–≤!",
	},
	{
		title: "–•—Ç–æ —Å—å–æ–≥–æ–¥–Ω—ñ –æ—Ç—Ä–∏–º–∞—î 5 –∑—ñ—Ä–æ–∫? üåü",
		description: "–ó–∞–π–¥–∏, —â–æ–± –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ –∑–∞ —É–ª—é–±–ª–µ–Ω–∏—Ö –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤!",
	},
	{
		title: "–ú–æ–≥–∏–ª—è–Ω—Å—å–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥: –ª–µ–≥–µ–Ω–¥–∏ —Ç–∞ –º—ñ—Ñ–∏ üìö",
		description: "–£–≤—ñ–π–¥–∏ —ñ –¥—ñ–∑–Ω–∞–π—Å—è, –¥–µ –ø—Ä–∞–≤–¥–∞, –∞ –¥–µ ‚Äî –≥–∞—Ä–Ω–∞ —Ä–µ–∫–ª–∞–º–∞!",
	},
	{
		title: "–ù–µ –≤—Å—ñ –≥–µ—Ä–æ—ó –Ω–æ—Å—è—Ç—å –º–∞–Ω—Ç—ñ—ó... üéì",
		description: "–î–µ—è–∫—ñ –ø—Ä–æ—Å—Ç–æ –∑–∞–ª–∏—à–∞—é—Ç—å —á–µ—Å–Ω—ñ –≤—ñ–¥–≥—É–∫–∏ –ø—Ä–æ –∫—É—Ä—Å–∏!",
	},
	{
		title: "–ë–∏—Ç–≤–∞ –∑–∞ —Ä–µ–π—Ç–∏–Ω–≥: –•—Ç–æ –ø–µ—Ä–µ–º–æ–∂–µ? üèÜ",
		description: "–ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —ñ –ø–æ–±–∞—á—å, —Ö—Ç–æ –Ω–∞ –≤–µ—Ä—à–∏–Ω—ñ –ø–µ–¥–∞–≥–æ–≥—ñ—á–Ω–æ–≥–æ –û–ª—ñ–º–ø—É!",
	},
];

type LoginSearch = {
	redirect?: string;
};

export const Route = createFileRoute("/login/")({
	component: LoginPage,
	validateSearch: (search: Record<string, string>): LoginSearch => ({
		redirect: search.redirect,
	}),
});

function LoginPage() {
	const { loginWithDjango, status, checkAuth } = useAuth();
	const navigate = useNavigate();
	const search = useSearch({ from: "/login/" });
	const hasRedirected = useRef(false);
	const [showAdminLogin, setShowAdminLogin] = useState(false);

	const message = useMemo(() => {
		const index = Math.floor(Math.random() * REDIRECT_MESSAGES.length);
		return REDIRECT_MESSAGES[index];
	}, []);

	useEffect(() => {
		// Check auth status when component mounts
		checkAuth();
	}, [checkAuth]);

	useEffect(() => {
		if (status === "authenticated" && !hasRedirected.current) {
			hasRedirected.current = true;
			const redirectTo = search.redirect || "/";
			navigate({ to: redirectTo, replace: true });
		}
	}, [status, search.redirect, navigate]);

	// Keyboard shortcut for admin login (Ctrl+Shift+D)
	useEffect(() => {
		const handleKeyDown = (e: KeyboardEvent) => {
			if (e.ctrlKey && e.shiftKey && e.key === "D") {
				e.preventDefault();
				setShowAdminLogin((prev) => !prev);
			}
		};

		window.addEventListener("keydown", handleKeyDown);
		return () => window.removeEventListener("keydown", handleKeyDown);
	}, []);

	return (
		<>
			<h1 className="text-3xl font-bold mb-4">
				{showAdminLogin ? "Admin Panel" : "–í—Ö—ñ–¥"}
			</h1>

			{!showAdminLogin ? (
				<>
					<div className="space-y-3 mb-6">
						<h2 className="text-xl font-semibold">{message.title}</h2>
						<p className="text-base text-muted-foreground">
							{message.description}
						</p>
					</div>
					<MicrosoftLoginButton className="w-full gap-2 h-12 text-base font-medium bg-primary hover:bg-primary/90 shadow-lg hover:shadow-xl transition-all duration-200" />
				</>
			) : (
				<LoginForm
					loginWithDjango={loginWithDjango}
					onCancel={() => setShowAdminLogin(false)}
				/>
			)}
		</>
	);
}
