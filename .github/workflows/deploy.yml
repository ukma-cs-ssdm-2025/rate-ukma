name: Deploy

on:
  workflow_call:
    inputs:
      archive_name:
        required: true
        type: string
      deployment_ref:
        description: "Commit SHA, Tag, or Branch to checkout. Defaults to the workflow run commit."
        required: false
        type: string
        default: ""
      test_url:
        description: "URL to run e2e tests against after deployment"
        required: false
        type: string
      run_e2e_tests:
        description: "Whether to run e2e tests after deployment"
        required: false
        type: boolean
        default: false
    secrets:
      SSH_HOST:
        required: true
      SSH_USER:
        required: true
      SSH_KEY:
        required: true

env:
  PROJECT_DIR: /opt/rateukma
  PROJECT_SOURCE_CODE: /opt/rateukma/src
  REMOTE_TMP_DEPLOY_DIR: /tmp/deploy
  REMOTE_BACKUP_CODE_DIR: /tmp/deploy/src-backup
  STATIC_ROOT: /opt/rateukma/static
  MAX_ATTEMPTS: 6
  SERVICES_HEALTHCHECK_TIMEOUT: 10

concurrency:
  group: deploy-${{ github.workflow }} # main-pipeline or prod-pipeline
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ inputs.deployment_ref || github.sha }}

      - name: Set environment variables
        run: |
          echo "ARCHIVE_NAME=${{ inputs.archive_name }}" >> $GITHUB_ENV

      - name: Create deployment archive
        run: |
          tar -czf ${{ env.ARCHIVE_NAME }} src/ docs/api/openapi-generated.yaml

      - name: Upload archive to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: ${{ env.ARCHIVE_NAME }}
          target: ${{ env.REMOTE_TMP_DEPLOY_DIR }}/

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          command_timeout: "30m"
          script: |
            echo "Deploying..."

            echo "Setting up project directory ownership..."
            sudo chown -R ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} ${{ env.PROJECT_DIR }} || true
            sudo chmod -R 755 ${{ env.PROJECT_DIR }} || true

            echo "Setting up tmp deploy directory ownership..."
            sudo chown -R ${{ secrets.SSH_USER }}:${{ secrets.SSH_USER }} ${{ env.REMOTE_TMP_DEPLOY_DIR }} || true
            sudo chmod -R 755 ${{ env.REMOTE_TMP_DEPLOY_DIR }} || true

            echo "Creating backup of current version..."

            mkdir -p "${{ env.REMOTE_TMP_DEPLOY_DIR }}"
            mkdir -p "${{ env.REMOTE_BACKUP_CODE_DIR }}"

            if [ -d "${{ env.PROJECT_SOURCE_CODE }}" ]; then
              echo "Backing up current source code..."
              cp -r ${{ env.PROJECT_SOURCE_CODE }} "${{ env.REMOTE_BACKUP_CODE_DIR }}/"
              echo "Backup created at ${{ env.REMOTE_BACKUP_CODE_DIR }}"
            fi

            echo "Stopping existing services..."
            cd ${{ env.PROJECT_SOURCE_CODE }}
            sudo docker compose --profile prod down || true

            echo "Cleaning project directory..."
            rm -rf ${{ env.PROJECT_SOURCE_CODE }}/*

            echo "Extracting new version..."
            cd ${{ env.PROJECT_DIR }}
            tar xzf ${{ env.REMOTE_TMP_DEPLOY_DIR }}/${{ env.ARCHIVE_NAME }}
            rm ${{ env.REMOTE_TMP_DEPLOY_DIR }}/${{ env.ARCHIVE_NAME }}

            echo "Copying environment file..."
            cp ${{ env.PROJECT_DIR }}/.env ${{ env.PROJECT_SOURCE_CODE }}/.env

            echo "Starting services..."
            cd ${{ env.PROJECT_SOURCE_CODE }}
            sudo docker compose --profile prod up -d --build

            echo "Waiting for services to be up and running..."
            max_attempts=${{ env.MAX_ATTEMPTS }}
            attempt=1
            services_healthy=false

            while [ $attempt -le $max_attempts ]; do
              echo "Up and running check attempt $attempt/$max_attempts..."
              
              if sudo docker compose ps --status=running | grep "Up" && \
                 [ -f ${{ env.STATIC_ROOT }}/index.html ]; then
                services_healthy=true
                break
              fi
              
              echo "Services not ready yet, waiting..."
              sleep ${{ env.SERVICES_HEALTHCHECK_TIMEOUT }}
              attempt=$((attempt + 1))
            done

            if [ "$services_healthy" = true ]; then
              echo "Services are up and healthy"
              echo "Cleaning up backup directory..."
              rm -rf "${{ env.REMOTE_BACKUP_CODE_DIR }}"
              echo "Deployment finished successfully"
            else
              echo "Services failed to start properly. Rolling back..."
              sudo docker compose down || true
              

              echo "Restoring previous version from ${{ env.REMOTE_BACKUP_CODE_DIR }}"
              rm -rf ${{ env.PROJECT_SOURCE_CODE }}/*
              cp -r "${{ env.REMOTE_BACKUP_CODE_DIR }}/src/"* ${{ env.PROJECT_SOURCE_CODE }}/
              
              cd ${{ env.PROJECT_SOURCE_CODE }}
              sudo docker compose --profile prod up -d --build
              
              echo "Rollback completed. Deployment failed."
              exit 1
            fi

  e2e-test:
    if: inputs.run_e2e_tests && inputs.test_url != ''
    needs: deploy
    uses: ./.github/workflows/e2e-test.yml
    with:
      test_url: ${{ inputs.test_url }}
      deployment_ref: ${{ inputs.deployment_ref }}
