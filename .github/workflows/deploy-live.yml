name: Deploy Live

on:
  push:
    branches: [live]
  workflow_dispatch:

env:
  PROJECT_DIR: /opt/rateukma
  PROJECT_SOURCE_CODE: /opt/rateukma/src
  ARCHIVE_NAME: rate-ukma-live.tar.gz

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Create deployment archive
        run: |
          cd ${{ env.PROJECT_SOURCE_CODE }}
          tar -czf ../${{ env.ARCHIVE_NAME }} .

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.LIVE_SSH_HOST }}
          username: ${{ secrets.LIVE_SSH_USER }}
          key: ${{ secrets.LIVE_SSH_KEY }}
          script_stop: true
          command_timeout: "30m"
          script: |
            echo "Copying deployment archive..."
            mkdir -p /tmp/deploy
            cd /tmp/deploy

            scp /tmp/${{ env.ARCHIVE_NAME }} ${{ secrets.LIVE_SSH_USER }}@${{ secrets.LIVE_SSH_HOST }}:/tmp/deploy/
            rm -f /tmp/${{ env.ARCHIVE_NAME }}

            echo "Creating backup of current version..."
            backup_dir="/tmp/backup_src"
            mkdir -p "$backup_dir"

            if [ -d "${{ env.PROJECT_SOURCE_CODE }}" ]; then
              echo "Backing up current source code..."
              cp -r ${{ env.PROJECT_SOURCE_CODE }} "$backup_dir/"
              echo "Backup created at $backup_dir"
            fi

            echo "Stopping existing services..."
            cd ${{ env.PROJECT_SOURCE_CODE }}
            docker compose down || true

            echo "Cleaning project directory..."
            rm -rf ${{ env.PROJECT_SOURCE_CODE }}/*

            echo "Extracting new version..."
            cd ${{ env.PROJECT_SOURCE_CODE }}
            tar xzf /tmp/deploy/${{ env.ARCHIVE_NAME }}
            rm -rf /tmp/deploy

            echo "Copying environment file..."
            cp ${{ env.PROJECT_DIR }}/.env ${{ env.PROJECT_SOURCE_CODE }}/.env

            echo "Starting services..."
            docker compose --profile prod up -d --build

            echo "Waiting for services to be up and running..."
            max_attempts=12
            attempt=1
            services_healthy=false

            while [ $attempt -le $max_attempts ]; do
              echo "Up and running check attempt $attempt/$max_attempts..."
              
              if docker compose ps | grep -q "Up" && \
                 [ -f "${{ env.PROJECT_DIR }}/static/index.html" ]; then
                services_healthy=true
                break
              fi
              
              echo "Services not ready yet, waiting..."
              sleep 10
              attempt=$((attempt + 1))
            done

            if [ "$services_healthy" = true ]; then
              echo "Services are up and healthy"
              echo "Cleaning up backup directory..."
              rm -rf "$backup_dir"
              echo "Deployment finished successfully"
            else
              echo "Services failed to start properly. Rolling back..."
              
              # Stop current services
              docker compose down || true
              
              # Restore old code
              echo "Restoring previous version from $backup_dir"
              rm -rf ${{ env.PROJECT_SOURCE_CODE }}/*
              cp -r "$backup_dir/src/"* ${{ env.PROJECT_SOURCE_CODE }}/
              
              # Start old version
              cd ${{ env.PROJECT_SOURCE_CODE }}
              docker compose --profile prod up -d --build
              
              echo "Rollback completed. Deployment failed."
              exit 1
            fi
