name: Live Build
on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: "Version tag to deploy (e.g., v1.2.3)"
        required: true
        type: string

jobs:
  test:
    uses: ./.github/workflows/test.yml

  openapi-validation:
    uses: ./.github/workflows/openapi-validation.yml

  audit:
    uses: ./.github/workflows/audit.yml
    secrets: inherit

  build:
    uses: ./.github/workflows/build.yml

  deploy-live:
    needs: [test, openapi-validation, audit, build]
    uses: ./.github/workflows/deploy-live.yml
    with:
      deployment_ref: ${{ inputs.version_tag }}
    secrets:
      SSH_HOST: ${{ secrets.LIVE_SSH_HOST }}
      SSH_USER: ${{ secrets.LIVE_SSH_USER }}
      SSH_KEY: ${{ secrets.LIVE_SSH_KEY }}

  update_pre_releases:
    needs: deploy-live
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.version_tag }}
          fetch-depth: 0

      - name: Fetch Tags
        run: |
          git config --global --add safe.directory "${GITHUB_WORKSPACE}"
          git fetch --tags

      - name: Get Previous Live Release
        id: prev_live_release
        env:
          LIVE_TAG_PREFIX: "live-"
        run: |
          PREV_TAG=$(git tag -l "$LIVE_TAG_PREFIX*" --sort=-v:refname | head -n 1)
          echo "prev_tag=$PREV_TAG" >> "$GITHUB_OUTPUT"

      - name: Get all releases between last live and current
        id: get_releases
        env:
          PREV_LIVE_TAG: ${{ steps.prev_live_release.outputs.prev_tag }}
          VERSION_TAG: "${{ inputs.version_tag }}"
          LIVE_TAG_PREFIX: "live-"
        run: |
          TAGS=$(git tag --sort=-v:refname)
          LAST_TAG=${PREV_LIVE_TAG#$LIVE_TAG_PREFIX}
          CURRENT_TAG=$VERSION_TAG

          RELEASES_TO_UPDATE=$(git log --pretty=format:"%D" $LAST_TAG..$CURRENT_TAG | \
            grep -oE 'tag: [^,)]+' | sed 's/tag: //' | sort -u | grep '^v')

          echo "Releases to update: $RELEASES_TO_UPDATE"
          echo "tags=$RELEASES_TO_UPDATE" >> "$GITHUB_OUTPUT"

      - name: Update Pre Releases
        id: update_pre_releases
        if: steps.get_releases.outputs.tags != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          IFS=$'\n' read -d '' -r -a tags <<< "${{ steps.get_releases.outputs.tags }}"
          echo "Processing releases: ${tags[@]}"

          for tag in "${tags[@]}"; do
            echo "Updating release: $tag"
            
            RELEASE_API="https://api.github.com/repos/${{ github.repository }}/releases/tags/$tag"
            RELEASE_ID=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "$RELEASE_API" | jq -r '.id')
            
            if [[ "$RELEASE_ID" == "null" || -z "$RELEASE_ID" ]]; then
              echo "Error: No release found for tag $tag" >&2
              continue
            fi

            echo "Release ID: $RELEASE_ID"

            PATCH_API="https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -X PATCH \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "$PATCH_API" \
              -d '{"prerelease": false}')

            if [[ "$RESPONSE" != "200" ]]; then
              echo "Error updating release $tag (HTTP $RESPONSE)" >&2
            fi
          done

  push_live_tag:
    needs: update_pre_releases
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.version_tag }}
          fetch-depth: 0

      - name: Push Live Version Tag
        id: push_live_tag
        env:
          LIVE_VERSION_TAG: "live-${{ inputs.version_tag }}"
        run: |
          git config --global --add safe.directory "${GITHUB_WORKSPACE}"
          git tag $LIVE_VERSION_TAG
          git push origin $LIVE_VERSION_TAG
