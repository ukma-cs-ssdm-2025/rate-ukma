openapi: 3.0.3
info:
  title: Rate UKMA API
  version: 1.0.0
  description: An API for rating UKMA courses and professors
paths:
  /api/v1/auth/csrf/:
    get:
      operationId: auth_csrf_retrieve
      description: 'Returns a CSRF token for use with session-based authentication.
        The token should be included in the ''X-CSRFToken'' header for subsequent
        POST requests that require CSRF protection. Version: v1.'
      summary: Get CSRF Token
      tags:
      - auth
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CSRFToken'
          description: CSRF token
  /api/v1/auth/login/:
    post:
      operationId: auth_login_create
      description: 'Logs in user using Django authentication flow. Version: v1.'
      summary: Django Login
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: Logged in
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                ValidationError:
                  value:
                    detail: Validation failed
                    status: 400
                    fields:
                      difficulty:
                      - Must be between 1 and 5.
                  summary: Validation error
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided
                    status: 401
          description: Unauthorized
  /api/v1/auth/login/microsoft/:
    get:
      operationId: auth_login_microsoft_retrieve
      description: 'Initiates Microsoft OAuth2 authentication flow. Redirects to Microsoft
        login page for @ukma.edu.ua accounts. Backend handles session authentication
        and redirects to frontend. Version: v1.'
      summary: Microsoft OAuth Login
      tags:
      - auth
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '302':
          description: 'Found: Temporary Redirect'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                ValidationError:
                  value:
                    detail: Validation failed
                    status: 400
                    fields:
                      difficulty:
                      - Must be between 1 and 5.
                  summary: Validation error
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                NotFound:
                  value:
                    detail: Not found
                    status: 404
                  summary: Not found
          description: Not found
  /api/v1/auth/logout/:
    post:
      operationId: auth_logout_create
      description: 'Logs out current user and redirects to the configured logout URL.
        Version: v1.'
      summary: Logout
      tags:
      - auth
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '302':
          description: 'Found: Temporary Redirect'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                ValidationError:
                  value:
                    detail: Validation failed
                    status: 400
                    fields:
                      difficulty:
                      - Must be between 1 and 5.
                  summary: Validation error
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                NotFound:
                  value:
                    detail: Not found
                    status: 404
                  summary: Not found
          description: Not found
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided
                    status: 401
          description: Unauthorized
  /api/v1/auth/session/:
    get:
      operationId: auth_session_retrieve
      description: 'Returns current authentication session information. Responds with
        200 and user data when authenticated, or 401 when no active session. Version:
        v1.'
      summary: Session state
      tags:
      - auth
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: Session state
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided
                    status: 401
          description: Unauthorized
  /api/v1/courses/:
    get:
      operationId: courses_list
      description: List courses with optional filters and pagination. Returns courses
        with aggregated ratings.
      summary: List courses
      parameters:
      - in: query
        name: avg_difficulty_order
        schema:
          type: string
          enum:
          - asc
          - desc
        description: 'Sort by average difficulty (values: ''asc'' or ''desc'')'
      - in: query
        name: avg_usefulness_order
        schema:
          type: string
          enum:
          - asc
          - desc
        description: 'Sort by average usefulness (values: ''asc'' or ''desc'')'
      - in: query
        name: department
        schema:
          type: string
          format: uuid
        description: Filter by department ID
      - in: query
        name: faculty
        schema:
          type: string
          format: uuid
        description: Filter by faculty ID
      - in: query
        name: instructor
        schema:
          type: string
          format: uuid
        description: Filter by instructor ID
      - in: query
        name: name
        schema:
          type: string
        description: Filter courses by name (case-insensitive partial match)
      - in: query
        name: page
        schema:
          type: integer
        description: 'Page number (default: 1)'
      - in: query
        name: page_size
        schema:
          type: integer
        description: 'Items per page (default: 20)'
      - in: query
        name: semesterTerm
        schema:
          type: string
        description: Filter by semester term (FALL, SPRING, SUMMER)
      - in: query
        name: semesterYear
        schema:
          type: integer
        description: Filter by semester year
      - in: query
        name: speciality
        schema:
          type: string
          format: uuid
        description: Filter by speciality ID
      - in: query
        name: typeKind
        schema:
          type: string
        description: Filter by course type (COMPULSORY, ELECTIVE, PROF_ORIENTED)
      tags:
      - courses
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseListResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                ValidationError:
                  value:
                    detail: Validation failed
                    status: 400
                    fields:
                      difficulty:
                      - Must be between 1 and 5.
                  summary: Validation error
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided
                    status: 401
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Forbidden:
                  value:
                    detail: You do not have permission to perform this action
                    status: 403
          description: Forbidden
  /api/v1/courses/{course_id}/:
    get:
      operationId: courses_retrieve
      description: Retrieve a single course by its ID with detailed information.
      summary: Retrieve a course
      parameters:
      - in: path
        name: course_id
        schema:
          type: string
          format: uuid
        description: A unique identifier for the course.
        required: true
      tags:
      - courses
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseDetail'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                ValidationError:
                  value:
                    detail: Validation failed
                    status: 400
                    fields:
                      difficulty:
                      - Must be between 1 and 5.
                  summary: Validation error
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided
                    status: 401
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Forbidden:
                  value:
                    detail: You do not have permission to perform this action
                    status: 403
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                NotFound:
                  value:
                    detail: Not found
                    status: 404
                  summary: Not found
          description: Not found
  /api/v1/courses/{course_id}/ratings/:
    get:
      operationId: courses_ratings_list
      description: List all ratings for a specific course with filters and pagination.
      summary: List ratings for a course
      parameters:
      - in: path
        name: course_id
        schema:
          type: string
          format: uuid
        description: Course ID from URL path
        required: true
      - in: query
        name: page
        schema:
          type: integer
        description: 'Page number (default: 1)'
      - in: query
        name: page_size
        schema:
          type: integer
        description: 'Items per page (default: 10)'
      tags:
      - ratings
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RatingRead'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                ValidationError:
                  value:
                    detail: Validation failed
                    status: 400
                    fields:
                      difficulty:
                      - Must be between 1 and 5.
                  summary: Validation error
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided
                    status: 401
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Forbidden:
                  value:
                    detail: You do not have permission to perform this action
                    status: 403
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                NotFound:
                  value:
                    detail: Not found
                    status: 404
                  summary: Not found
          description: Not found
    post:
      operationId: courses_ratings_create
      description: Create a new rating for a course offering. Each student can only
        rate a course offering once and must be enrolled in the course. The student
        is automatically determined from the authenticated user.
      summary: Create a new rating
      parameters:
      - in: path
        name: course_id
        schema:
          type: string
        required: true
      tags:
      - ratings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RatingCreateUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RatingCreateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RatingCreateUpdate'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingRead'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                ValidationError:
                  value:
                    detail: Validation failed
                    status: 400
                    fields:
                      difficulty:
                      - Must be between 1 and 5.
                  summary: Validation error
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided
                    status: 401
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Forbidden:
                  value:
                    detail: You do not have permission to perform this action
                    status: 403
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                NotFound:
                  value:
                    detail: Not found
                    status: 404
                  summary: Not found
          description: Not found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Conflict-RatingAlreadyExists:
                  value:
                    detail: You have already rated this course offering
                    status: 409
                  summary: Conflict - Rating already exists
          description: Conflict - Rating already exists
  /api/v1/courses/{course_id}/ratings/{rating_id}/:
    get:
      operationId: courses_ratings_retrieve
      description: Retrieve a specific rating by ID.
      summary: Get rating details
      parameters:
      - in: path
        name: course_id
        schema:
          type: string
        required: true
      - in: path
        name: rating_id
        schema:
          type: string
        required: true
      tags:
      - ratings
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingRead'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                ValidationError:
                  value:
                    detail: Validation failed
                    status: 400
                    fields:
                      difficulty:
                      - Must be between 1 and 5.
                  summary: Validation error
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided
                    status: 401
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Forbidden:
                  value:
                    detail: You do not have permission to perform this action
                    status: 403
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                NotFound:
                  value:
                    detail: Not found
                    status: 404
                  summary: Not found
          description: Not found
    put:
      operationId: courses_ratings_update
      description: Update an existing rating. Only the owner can update their rating.
      summary: Update a rating
      parameters:
      - in: path
        name: course_id
        schema:
          type: string
        required: true
      - in: path
        name: rating_id
        schema:
          type: string
        required: true
      tags:
      - ratings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RatingCreateUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RatingCreateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RatingCreateUpdate'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingRead'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                ValidationError:
                  value:
                    detail: Validation failed
                    status: 400
                    fields:
                      difficulty:
                      - Must be between 1 and 5.
                  summary: Validation error
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided
                    status: 401
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Forbidden:
                  value:
                    detail: You do not have permission to perform this action
                    status: 403
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                NotFound:
                  value:
                    detail: Not found
                    status: 404
                  summary: Not found
          description: Not found
    patch:
      operationId: courses_ratings_partial_update
      description: Partially update an existing rating. Only the owner can update
        their rating.
      summary: Partially update a rating
      parameters:
      - in: path
        name: course_id
        schema:
          type: string
        required: true
      - in: path
        name: rating_id
        schema:
          type: string
        required: true
      tags:
      - ratings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRatingCreateUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRatingCreateUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRatingCreateUpdate'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RatingRead'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                ValidationError:
                  value:
                    detail: Validation failed
                    status: 400
                    fields:
                      difficulty:
                      - Must be between 1 and 5.
                  summary: Validation error
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided
                    status: 401
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Forbidden:
                  value:
                    detail: You do not have permission to perform this action
                    status: 403
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                NotFound:
                  value:
                    detail: Not found
                    status: 404
                  summary: Not found
          description: Not found
    delete:
      operationId: courses_ratings_destroy
      description: Delete a rating. Only the owner can delete their rating.
      summary: Delete a rating
      parameters:
      - in: path
        name: course_id
        schema:
          type: string
        required: true
      - in: path
        name: rating_id
        schema:
          type: string
        required: true
      tags:
      - ratings
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: Deleted
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided
                    status: 401
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Forbidden:
                  value:
                    detail: You do not have permission to perform this action
                    status: 403
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                NotFound:
                  value:
                    detail: Not found
                    status: 404
                  summary: Not found
          description: Not found
  /api/v1/instructors/{instructor_id}:
    get:
      operationId: instructors_retrieve
      description: Retrieve a single instructor by their ID with detailed information.
      summary: Retrieve an instructor
      parameters:
      - in: path
        name: instructor_id
        schema:
          type: string
          format: uuid
        description: Instructor ID
        required: true
      tags:
      - instructors
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instructor'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                ValidationError:
                  value:
                    detail: Validation failed
                    status: 400
                    fields:
                      difficulty:
                      - Must be between 1 and 5.
                  summary: Validation error
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided
                    status: 401
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Forbidden:
                  value:
                    detail: You do not have permission to perform this action
                    status: 403
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                NotFound:
                  value:
                    detail: Not found
                    status: 404
                  summary: Not found
          description: Not found
components:
  schemas:
    AcademicDegreeEnum:
      enum:
      - PHD
      - DRSCI
      type: string
      description: |-
        * `PHD` - PhD
        * `DRSCI` - DoctorOfSciences
    AcademicTitleEnum:
      enum:
      - ASSISTANT
      - LECTURER
      - SENIOR_LECTURER
      - ASSOCIATE_PROF
      - PROFESSOR
      type: string
      description: |-
        * `ASSISTANT` - Assistant
        * `LECTURER` - Lecturer
        * `SENIOR_LECTURER` - SeniorLecturer
        * `ASSOCIATE_PROF` - AssociateProfessor
        * `PROFESSOR` - Professor
    CSRFToken:
      type: object
      properties:
        csrf_token:
          type: string
          maxLength: 64
      required:
      - csrf_token
    CourseDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        department:
          type: string
          format: uuid
        department_name:
          type: string
          readOnly: true
        faculty_name:
          type: string
          readOnly: true
        course_specialities:
          type: array
          items:
            $ref: '#/components/schemas/CourseSpecialityInline'
          readOnly: true
        avg_difficulty:
          type: number
          format: double
          readOnly: true
          nullable: true
        avg_usefulness:
          type: number
          format: double
          readOnly: true
          nullable: true
        ratings_count:
          type: integer
          readOnly: true
        specialities_with_kind:
          type: array
          items:
            $ref: '#/components/schemas/SpecialityWithKindPayload'
          writeOnly: true
      required:
      - department
      - status
      - title
    CourseList:
      type: object
      description: Lighter serializer for listing courses.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        department:
          type: string
          format: uuid
        department_name:
          type: string
          readOnly: true
        faculty_name:
          type: string
          readOnly: true
        avg_difficulty:
          type: number
          format: double
          readOnly: true
          nullable: true
        avg_usefulness:
          type: number
          format: double
          readOnly: true
          nullable: true
        ratings_count:
          type: integer
          readOnly: true
        course_specialities:
          type: array
          items:
            $ref: '#/components/schemas/CourseSpecialityInline'
          readOnly: true
      required:
      - department
      - status
      - title
    CourseListResponse:
      type: object
      description: Schema for GET /api/v1/courses response envelope.
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CourseList'
        filters:
          type: object
          additionalProperties: {}
        page:
          type: integer
        page_size:
          type: integer
        total:
          type: integer
      required:
      - filters
      - items
      - page
      - page_size
      - total
    CourseSpecialityInline:
      type: object
      description: Inline serializer for displaying course specialities with type
        kind.
      properties:
        speciality_id:
          type: string
          format: uuid
          readOnly: true
        speciality_title:
          type: string
          readOnly: true
        type_kind:
          $ref: '#/components/schemas/TypeKindEnum'
      required:
      - type_kind
    ErrorEnvelope:
      type: object
      properties:
        detail:
          type: string
        status:
          type: integer
        fields:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
      required:
      - detail
      - status
    Instructor:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        first_name:
          type: string
          maxLength: 120
        patronymic:
          type: string
          nullable: true
          maxLength: 120
        last_name:
          type: string
          maxLength: 120
        academic_degree:
          allOf:
          - $ref: '#/components/schemas/AcademicDegreeEnum'
          nullable: true
        academic_title:
          allOf:
          - $ref: '#/components/schemas/AcademicTitleEnum'
          nullable: true
      required:
      - first_name
      - last_name
    Login:
      type: object
      properties:
        username:
          type: string
          maxLength: 150
        password:
          type: string
          writeOnly: true
          maxLength: 128
      required:
      - password
      - username
    PatchedRatingCreateUpdate:
      type: object
      description: |-
        Serializer for creating and updating Ratings.
        Student is automatically set from authenticated user.
      properties:
        course_offering:
          type: string
          format: uuid
          description: UUID of the course offering being rated
        difficulty:
          type: integer
          maximum: 5
          minimum: 1
        usefulness:
          type: integer
          maximum: 5
          minimum: 1
        comment:
          type: string
          nullable: true
        is_anonymous:
          type: boolean
    RatingCreateUpdate:
      type: object
      description: |-
        Serializer for creating and updating Ratings.
        Student is automatically set from authenticated user.
      properties:
        course_offering:
          type: string
          format: uuid
          description: UUID of the course offering being rated
        difficulty:
          type: integer
          maximum: 5
          minimum: 1
        usefulness:
          type: integer
          maximum: 5
          minimum: 1
        comment:
          type: string
          nullable: true
        is_anonymous:
          type: boolean
      required:
      - course_offering
      - difficulty
      - usefulness
    RatingRead:
      type: object
      description: |-
        Serializer for reading Rating with privacy protection.
        Returns null for student_id and student_name when is_anonymous is True.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        student_id:
          type: string
          format: uuid
          nullable: true
          readOnly: true
        student_name:
          type: string
          nullable: true
          readOnly: true
        course_offering:
          type: string
          format: uuid
          readOnly: true
        course:
          type: string
          format: uuid
          readOnly: true
        difficulty:
          type: integer
          readOnly: true
        usefulness:
          type: integer
          readOnly: true
        comment:
          type: string
          readOnly: true
          nullable: true
        is_anonymous:
          type: boolean
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
    Session:
      type: object
      properties:
        is_authenticated:
          type: boolean
        user:
          allOf:
          - $ref: '#/components/schemas/SessionUser'
          nullable: true
        expires_at:
          type: string
          format: date-time
          nullable: true
      required:
      - is_authenticated
      - user
    SessionUser:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
      required:
      - id
    SpecialityWithKindPayload:
      type: object
      description: Payload serializer for creating/updating course speciality associations
        (write-only).
      properties:
        speciality:
          type: string
          format: uuid
        type_kind:
          $ref: '#/components/schemas/TypeKindEnum'
      required:
      - speciality
      - type_kind
    StatusEnum:
      enum:
      - PLANNED
      - ACTIVE
      - FINISHED
      type: string
      description: |-
        * `PLANNED` - Planned
        * `ACTIVE` - Active
        * `FINISHED` - Finished
    TypeKindEnum:
      enum:
      - COMPULSORY
      - ELECTIVE
      - PROF_ORIENTED
      type: string
      description: |-
        * `COMPULSORY` - Compulsory
        * `ELECTIVE` - Elective
        * `PROF_ORIENTED` - ProfOriented
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
