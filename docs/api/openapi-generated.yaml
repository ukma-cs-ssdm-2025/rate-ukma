openapi: 3.0.3
info:
  title: Rate UKMA API
  version: 1.0.0
  description: An API for rating UKMA courses and professors
paths:
  /api/v1/auth/login/:
    post:
      operationId: auth_login_create
      description: 'Logs in user using Django authentication flow. Version: v1.'
      summary: Django Login
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '200':
          description: Logged in
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                ValidationError:
                  value:
                    detail: Validation failed
                    status: 400
                    fields:
                      difficulty:
                      - Must be between 1 and 5.
                  summary: Validation error
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided
                    status: 401
          description: Unauthorized
  /api/v1/auth/login/microsoft/:
    get:
      operationId: auth_login_microsoft_retrieve
      description: 'Initiates Microsoft OAuth2 authentication flow. Redirects to Microsoft
        login page for @ukma.edu.ua accounts. Backend handles session authentication
        and redirects to frontend. Version: v1.'
      summary: Microsoft OAuth Login
      tags:
      - auth
      security:
      - cookieAuth: []
      - tokenAuth: []
      - {}
      responses:
        '302':
          description: 'Found: Temporary Redirect'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                ValidationError:
                  value:
                    detail: Validation failed
                    status: 400
                    fields:
                      difficulty:
                      - Must be between 1 and 5.
                  summary: Validation error
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                NotFound:
                  value:
                    detail: Not found
                    status: 404
                  summary: Not found
          description: Not found
  /api/v1/auth/logout/:
    post:
      operationId: auth_logout_create
      description: 'Logs out current user and redirects to the configured logout URL.
        Version: v1.'
      summary: Logout
      tags:
      - auth
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '302':
          description: 'Found: Temporary Redirect'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                ValidationError:
                  value:
                    detail: Validation failed
                    status: 400
                    fields:
                      difficulty:
                      - Must be between 1 and 5.
                  summary: Validation error
          description: Bad request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                NotFound:
                  value:
                    detail: Not found
                    status: 404
                  summary: Not found
          description: Not found
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided
                    status: 401
          description: Unauthorized
  /api/v1/courses/:
    get:
      operationId: courses_list
      description: List courses with optional filters and pagination. Returns courses
        with aggregated ratings.
      summary: List courses
      parameters:
      - in: query
        name: avg_difficulty_sort
        schema:
          type: boolean
        description: Sort by average difficulty (true=ascending, false=descending)
      - in: query
        name: avg_usefulness_sort
        schema:
          type: boolean
        description: Sort by average usefulness (true=ascending, false=descending)
      - in: query
        name: department
        schema:
          type: string
          format: uuid
        description: Filter by department ID
      - in: query
        name: faculty
        schema:
          type: string
          format: uuid
        description: Filter by faculty ID
      - in: query
        name: name
        schema:
          type: string
        description: Filter courses by name (case-insensitive partial match)
      - in: query
        name: page
        schema:
          type: integer
        description: 'Page number (default: 1)'
      - in: query
        name: page_size
        schema:
          type: integer
        description: 'Number of items per page (default: 20)'
      - in: query
        name: speciality
        schema:
          type: string
          format: uuid
        description: Filter by speciality ID
      - in: query
        name: typeKind
        schema:
          type: string
        description: Filter by course type (COMPULSORY, ELECTIVE, PROF_ORIENTED)
      tags:
      - courses
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseListResponse'
          description: Paginated list of courses with filters and aggregated ratings.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                ValidationError:
                  value:
                    detail: Validation failed
                    status: 400
                    fields:
                      difficulty:
                      - Must be between 1 and 5.
                  summary: Validation error
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Unauthorized:
                  value:
                    detail: Authentication credentials were not provided
                    status: 401
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorEnvelope'
              examples:
                Forbidden:
                  value:
                    detail: You do not have permission to perform this action
                    status: 403
          description: Forbidden
components:
  schemas:
    CourseLight:
      type: object
      description: Lighter serializer for listing courses.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/StatusEnum'
        department:
          type: string
          format: uuid
        avg_difficulty:
          type: number
          format: double
          readOnly: true
          nullable: true
        avg_usefulness:
          type: number
          format: double
          readOnly: true
          nullable: true
        ratings_count:
          type: integer
          readOnly: true
      required:
      - avg_difficulty
      - avg_usefulness
      - department
      - id
      - ratings_count
      - status
      - title
    CourseListResponse:
      type: object
      description: Schema for GET /api/v1/courses response envelope.
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/CourseLight'
        filters:
          type: object
          additionalProperties: {}
        page:
          type: integer
        page_size:
          type: integer
        total:
          type: integer
      required:
      - filters
      - page
      - page_size
      - results
      - total
    ErrorEnvelope:
      type: object
      properties:
        detail:
          type: string
        status:
          type: integer
        fields:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
      required:
      - detail
      - status
    Login:
      type: object
      properties:
        username:
          type: string
          maxLength: 150
        password:
          type: string
          writeOnly: true
          maxLength: 128
      required:
      - password
      - username
    StatusEnum:
      enum:
      - PLANNED
      - ACTIVE
      - FINISHED
      type: string
      description: |-
        * `PLANNED` - Planned
        * `ACTIVE` - Active
        * `FINISHED` - Finished
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
